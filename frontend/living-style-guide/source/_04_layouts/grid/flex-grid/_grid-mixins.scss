@use "sass:map";
@use "sass:meta";
@use "sass:math";

@import "../common/no-gutter.scss";

/* ------------------------------------ *\
  * GRID MIXINS
\* ------------------------------------ */

/// Create a column offset for a given span and column count.
/// @param {Number} $span - The number of columns the offset should cover
/// @param {Number} $columns - The total number of columns available
/// @access private
@mixin make-col-offset($span, $columns) {
  $offset: 0;
  @if meta.function-exists("div", "math") {
    $offset: math.div($span, $columns);
  } @else {
    $offset: ($span / $columns);
  }
  @if $offset == 0 {
    margin-left: 0;
  } @else {
    margin-left: math.percentage($offset);
  }
}

/// Define the width of the column for a given span and column count.
/// A width of 0 will hide the column entirely.
/// @param {Number} $span - The number of columns covered
/// @param {Number} $columns - The total number of columns available
@mixin make-col($span, $columns) {
  @if $span == 0 {
    display: none;
  } @else {
    // Explicitly include `display: block` to override
    display: block;
    // Add a `max-width` to ensure content within each column does not blow out
    // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
    // do not appear to require this.
    @if meta.function-exists("div", "math") {
      max-width: math.percentage(math.div($span, $columns));
      flex: 0 0 math.percentage(math.div($span, $columns));
    } @else {
      max-width: math.percentage(($span / $columns));
      flex: 0 0 math.percentage(($span / $columns));
    }
  }
}

/// Used to initialize the default properties for a column class, most notably for setting width and default gutters when a column's breakpoint has not been hit yet.
/// @param {Number} $gutter [$grid-gutter] - The gutter for the grid system
/// @param {Number} $collapsed-gutter [$grid-gutter--condensed] - The condensed mode gutter
/// 1. Prevent columns from becoming too narrow when at smaller grid tiers by always setting `width: 100%;`. This works because `flex` values are used later on to override this initial width.///// 2. For condensed use-case, the gutters collapse to 2px solid, 1px on each side.
/// 3. For the narrow use-case, our container hangs 16px into the gutter

@mixin make-col-ready(
  $gutter: $grid-gutter,
  $condensed-gutter: $grid-gutter--condensed
) {
  /* 1 */
  width: 100%;
  padding-right: $gutter * 0.5;
  padding-left: $gutter * 0.5;

  /* 2 */
  .row--condensed &,
  .grid--condensed & {
    padding-right: $condensed-gutter * 0.5;
    padding-left: $condensed-gutter * 0.5;
  }

  /* 3 */
  .row--narrow &,
  .grid--narrow & {
    padding-right: $gutter * 0.5;
    padding-left: 0;
  }
}

/// Output the CSS required for all the columns in a given grid system.
/// @param {Map} $breakpoints [$breakpoints] - The breakpoints in the grid system
/// @param {Number} $gutter [$rid-gutter] - The gutter for the grid system
/// @access private

@mixin make-grid-columns($breakpoints: $breakpoints, $gutter: $grid-gutter) {
  .col {
    @include make-col-ready($gutter);
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint);
    $columns: map.get(map.get($breakpoints, $breakpoint), columns);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 0 through $columns {
      .col#{$infix}-#{$i} {
        @include make-col-ready($gutter);
      }
    }

    .col#{$infix},
    .col#{$infix}--auto {
      @include make-col-ready($gutter);
    }

    @include breakpoint($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col,
      .col#{$infix} {
        max-width: 100%;
        flex-basis: 0;
        flex-grow: 1;
      }

      .col--auto,
      .col#{$infix}--auto {
        width: auto;
        // Reset earlier grid tiers
        max-width: 100%;
        flex: 1 0 0%;
      }

      @for $i from 0 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      @for $i from 0 through ($columns - 1) {
        @if not($infix == "") {
          .offset#{$infix}-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }
    }
  }
}


/// Define the properties for a selector assigned to a row in the grid system.
/// @param {Number} $gutter [$grid-gutter] - The gutter in the grid system
/// @access private

@mixin make-row($gutter: $grid-gutter) {
  display: flex;
  flex-wrap: wrap;
  margin-right: -1 * $gutter * 0.5;
  margin-left: -1 * $gutter * 0.5;
}

/// Get the last breakpoint width and set max-width to its value
/// @param {Map} $breakpoints [$breakpoints] - A map of breakpoints where the key is the name
/// @access private
@mixin set-max-width-by-largest-breakpoint($breakpoints: $breakpoints) {
  $largest-breakpoint: last-map-item($breakpoints);

  max-width: map.get($largest-breakpoint, "width");
}

/// Create the container for a grid. Will cause full-bleed for the grid unless
/// max-width properties are added with `make-container-max-widths`
/// @param {Map} $breakpoints [$breakpoints] - A map of breakpoints where the key is the name

@mixin make-container($breakpoints: $breakpoints) {
  @extend %margin-centered;

  @include set-max-width-by-largest-breakpoint();

  @each $name, $value in $breakpoints {
    $prev-breakpoint: map.get($breakpoints, breakpoint-prev($name));
    $margin: map.get($value, margin);

    @if $prev-breakpoint {
      $prev-margin: map.get($prev-breakpoint, margin);
      @if $prev-margin != $margin {
        @include breakpoint($name) {
          padding-right: ($grid-gutter * 0.5) + $margin;
          padding-left: ($grid-gutter * 0.5) + $margin;
        }
      }
    } @else {
      @include breakpoint($name) {
        padding-right: #{($grid-gutter * 0.5) + $margin};
        padding-left: #{($grid-gutter * 0.5) + $margin};
      }
    }
  }
}

/// Generate the CSS for a grid for the given breakpoints and gutters
/// @param {Map} $breakpoints [$breakpoints] - The default breakpoints
/// @param {Number} $grid-gutter [$grid-gutter] - The default gutters
/// @param {Number} $condensed-gutter [$grid-gutter--condensed] - The condensed mode gutter
/// @access public
@mixin generate-grid(
  $breakpoints: $breakpoints,
  $grid-gutter: $grid-gutter,
  $condensed-gutter: $grid-gutter--condensed
) {
  .grid {
    @include make-container($breakpoints);

    @include largest-breakpoint($breakpoints) {
      @include m("full-width") {
        max-width: 100%;
      }
    }

    @include m("condensed") {
      [class*="col"] {
        padding-top: $condensed-gutter * 0.5;
        padding-bottom: $condensed-gutter * 0.5;
      }
    }
  }

  .row {
    @include make-row();
  }

  .row-padding [class*="col"],
  .col-padding {
    padding-top: $grid-gutter * 0.5;
    padding-bottom: $grid-gutter * 0.5;
  }
}

/// Add `hang--start` and `hang--end` classes for a given gutter. These classes are
/// used alongside `no-gutter--start` and `no-gutter--end` to "hang" type.
/// @param {Number} $gutter [$grid-gutter] - The gutter in the grid system
/// @access private
@mixin hang($gutter: $grid-gutter) {
  .hang--start {
    padding-left: $gutter * 0.5;
  }

  .hang--end {
    padding-right: $gutter * 0.5;
  }

  // Deprecated ☠️
  .hang--left {
    padding-left: $gutter * 0.5;
  }

  .hang--right {
    padding-right: $gutter * 0.5;
  }
}
