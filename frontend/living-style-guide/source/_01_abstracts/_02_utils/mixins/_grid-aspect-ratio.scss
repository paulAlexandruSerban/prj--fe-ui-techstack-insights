@use "sass:meta";
@use "sass:math";
@use "sass:list";

/// The aspect ratios that are used to generate corresponding aspect ratio
/// classes in code
/// @type List
/// @access public
$aspect-ratios: (
  (16, 9),
  (9, 16),
  (2, 1),
  (1, 2),
  (4, 3),
  (3, 4),
  (3, 2),
  (2, 3),
  (1, 1)
);

/// Generates the CSS classname utilities for the aspect ratios
///
/// CSS Tricks article on aspect ratios and all the different ways it can be done.
/// https://css-tricks.com/aspect-ratio-boxes/#article-header-id-6
///
/// That article references an earlier article on the topic.
/// https://keithjgrant.com/posts/2017/03/aspect-ratios/
///
/// @param {Number} $width width from an aspect ratio
/// @param {Number} $height height from an aspect ratio
/// @access private
@mixin grid-aspect-ratio($aspect-ratios: $aspect-ratios) {
  .aspect-ratio {
    @extend %clearfix;

    @include relative();

    &::before {
      @extend %float-left;

      width: 1px;
      height: 0;
      margin-left: -1px;
      content: "";
    }
  }

  @each $aspect-ratio in $aspect-ratios {
    $width: list.nth($aspect-ratio, 1);
    $height: list.nth($aspect-ratio, 2);

    .aspect-ratio--#{$width}x#{$height}::before {
      @if meta.function-exists("div", "math") {
        padding-top: math.percentage(math.div($height, $width));
      } @else {
        padding-top: math.percentage(($height / $width));
      }
    }
  }

  .aspect-ratio--object {
    @include absolute($top: 0, $left: 0);
    width: 100%;
    height: 100%;
    aspect-ratio: 2 / 1;
  }
}
