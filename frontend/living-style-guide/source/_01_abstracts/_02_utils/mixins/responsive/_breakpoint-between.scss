@use "sass:meta";
@use "sass:map";

/// Generate a media query for the range between the lower and upper breakpoints
/// @param {String | Number} $lower
/// @param {String | Number} $upper
/// @param {Map} $breakpoints [$breakpoints] - A map of breakpoints where the key is the name
/// @content
/// @access public

@mixin breakpoint-between($lower, $upper, $breakpoints: $breakpoints) {
  $is-number-lower: meta.type-of($lower) == "number";
  $is-number-upper: meta.type-of($upper) == "number";
  $min: if($is-number-lower, $lower, map.get($breakpoints, $lower));
  $max: if($is-number-upper, $upper, map.get($breakpoints, $upper));

  @if $min and $max {
    $min-width: if(not $is-number-lower and $min, map.get($min, width), $min);
    $max-width: if(not $is-number-upper and $max, map.get($max, width), $max);
    @media (min-width: $min-width) and (max-width: $max-width) {
      @content;
    }
  } @else if $min != null and $max == null {
    @include breakpoint-up($lower) {
      @content;
    }
  } @else if $min == null and $max != null {
    @include breakpoint-down($upper) {
      @content;
    }
  } @else {
    @error "Unable to find a breakpoint to satisfy: (#{$lower},#{$upper}). Expected both to be one of (#{map.keys($breakpoints)}).";
  }
}

/* Examples
.example__breakpoint-between {
  @include breakpoint-between(desktop, ultra-wide) {
    color: red;
  }
}
*/
